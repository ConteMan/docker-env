version: '3.4'

services:

  nginx:
    container_name: nginx
    image: "${NGINX_VERSION}"
    ports:
      - 80:80
      - 443:443
      - 443:443/udp
    volumes:
      - ./etc/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./etc/nginx/conf.d:/etc/nginx/conf.d
      - ./etc/nginx/ssl:/etc/nginx/ssl
      - ./log/nginx:/var/log/nginx
      - ./src:/var/www
    restart: on-failure

  nginx-inner:
    container_name: nginx-inner
    image: "${NGINX_VERSION}"
    expose:
      - "80"
      - "443"
      - "443/udp"
    volumes:
      - ./etc/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./etc/nginx/conf.d:/etc/nginx/conf.d
      - ./etc/nginx/ssl:/etc/nginx/ssl
      - ./log/nginx:/var/log/nginx
      - ./src:/var/www
    restart: on-failure

  mysql:
    container_name: mysql
    image: "${MYSQL_VERSION}"
    privileged: true
    ports:
      - ${MYSQL_PORT}:3306
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - ./etc/mysql/my.cnf:/etc/mysql/my.cnf
      - ./etc/mysql/my.cnf.d:/etc/mysql/conf.d
      - ./data/mysql/data:/var/lib/mysql
      - ./log/mysql:/var/log/mysql
    environment:
      TZ: ${TZ}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    restart: on-failure

  postgres:
    container_name: postgres
    image: ${POSTGRES_VERSION}
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - ./data/postgresql/data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    restart: on-failure

  mongodb:
    container_name: mongodb
    image: "${MONGO_VERSION}"
    ports:
      - ${MONGO_PORT}:27017
    command: --config /etc/mongo/mongod.conf
    volumes:
      - ./etc/mongo/conf:/etc/mongo
      - ./data/mongo/db:/data/db
      - ./log/mongo:/var/log/mongodb
    environment:
      TZ: ${TZ}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    restart: on-failure

  redis:
    container_name: redis
    image: "${REDIS_VERSION}"
    ports:
      - ${REDIS_PORT}:6379
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    volumes:
      - ./etc/redis/conf:/usr/local/etc/redis
      - ./data/redis/data:/data:rw
      - ./log/redis:/logs
    environment:
      TZ: ${TZ}
    restart: on-failure

  traefik:
    container_name: traefik
    image: "${TRAEFIK_VERSION}"
    restart: always
    ports:
      - 80:80
      - 443:443
    networks:
      - ${NETWORK}
    command:
      - "--global.sendanonymoususage=false"
      - "--global.checknewversion=false"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=${TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--api=true"
      - "--api.insecure=false"
      - "--api.dashboard=true"
      - "--api.debug=false"
      - "--ping=true"
      - "--log.level=warn"
      - "--log.format=common"
      - "--accesslog=false"
      - "--accesslog.filepath=/data/logs/access.log"
      - "--accesslog.bufferingsize=100"
      - "--providers.docker=true"
      - "--providers.docker.watch=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.swarmMode=false"
      - "--providers.docker.useBindPortIP=false"
      - "--providers.docker.network=${NETWORK}"
      - "--providers.file=true"
      - "--providers.file.watch=true"
      - "--providers.file.directory=/etc/traefik/config"
      - "--providers.file.debugloggeneratedtemplate=true"
    volumes:
      # 仅限标准的 Linux 环境
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./etc/traefik/config/:/etc/traefik/config/:ro
      - ./etc/traefik/ssl/:/data/ssl/:ro
      - ./etc/traefik/ssl/acme/letsencrypt:/letsencrypt
      - ./log/traefik/:/data/logs
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${NETWORK}"
      # 默认请求转发 https 端口
      - "traefik.http.routers.traefik-dash-default.middlewares=https-redirect@file"
      - "traefik.http.routers.traefik-dash-default.entrypoints=http"
      - "traefik.http.routers.traefik-dash-default.rule=Host(`${TRAEFIK_DASHBOARD_URL}`)"
      - "traefik.http.routers.traefik-dash-default.tls.certResolver=myresolver"
      - "traefik.http.routers.traefik-dash-default.service=dashboard@internal"
      # 处理网页
      - "traefik.http.middlewares.basic-auth.basicauth.users=${TRAEFIK_DASHBOARD_BASIC_AUTH}"
      - "traefik.http.routers.traefik-dash-web.middlewares=gzip@file"
      - "traefik.http.routers.traefik-dash-web.middlewares=basic-auth"
      - "traefik.http.routers.traefik-dash-web.entrypoints=https"
      - "traefik.http.routers.traefik-dash-web.rule=Host(`${TRAEFIK_DASHBOARD_URL}`) && PathPrefix(`/`)"
      - "traefik.http.routers.traefik-dash-web.tls=true"
      - "traefik.http.routers.traefik-dash-web.service=dashboard@internal"
      # 处理接口
      - "traefik.http.routers.traefik-dash-api.middlewares=dash-compress@file"
      - "traefik.http.routers.traefik-dash-api.entrypoints=https"
      - "traefik.http.routers.traefik-dash-api.rule=Host(`${TRAEFIK_DASHBOARD_URL}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.traefik-dash-api.tls=true"
      - "traefik.http.routers.traefik-dash-api.service=api@internal"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --proxy off localhost:8080/ping || exit 1"]
      interval: 3s
      retries: 12
    logging:
      driver: "json-file"
      options:
        max-size: "1m"

networks:
  "${NETWORK}":
    external: true